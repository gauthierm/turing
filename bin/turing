#!/usr/bin/env php
<?php

namespace Silverorange\Turing;

$autoloadPaths = [
    // Try to load autoloader if this is the root project.
    'root' => __DIR__ . '/../vendor/autoload.php',

    // Try to load an autoloader if this is installed as a library for
    // another root project.
    'dependency' => __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadPaths as $type => $path) {
    if (file_exists($path)) {
        require_once $path;

        if ($type === 'dependency') {
            define('STEWARD_BASE_DIR', realpath(__DIR__ . '/../../../..'));
        } else {
            define('STEWARD_BASE_DIR', realpath(__DIR__ . '/..'));
        }

        break;
    }
}

use Lmc\Steward\Console\EventListener\ListenerInstantiator;
use Silverorange\Turing\Console\Command\CleanCommand;
use Silverorange\Turing\Console\Command\RunCommand;
use Silverorange\Turing\Console\Command\DefaultCommand;
use Silverorange\Turing\Config\Environment;
use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;

Environment::load();

$dispatcher = new EventDispatcher();
$application = new Application('Turing', '1.0.0');
$application->setDispatcher($dispatcher);

// Search for listeners and attach them to dispatcher
(new ListenerInstantiator())->instantiate($dispatcher, STEWARD_BASE_DIR);

$defaultCommand = new DefaultCommand();

$application->addCommands(
    [
        new CleanCommand($dispatcher),
        new RunCommand($dispatcher),
        $defaultCommand,
    ]
);

//$application->setDefaultCommand('default');
$application->run();
